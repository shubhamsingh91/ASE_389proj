# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from towr_ros/TowrCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import xpp_msgs.msg

class TowrCommand(genpy.Message):
  _md5sum = "9687aa81cfa0759f837eb5ec3b2f880e"
  _type = "towr_ros/TowrCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The command for the robot specified by the user

xpp_msgs/StateLin3d    goal_lin                  # the linear state to reach (x,y,z and derivatives)
xpp_msgs/StateLin3d    goal_ang                  # the angular state to reach (roll, pitch, yaw and derivatives)
float64                total_duration            # the total time to reach the goal state
bool                   replay_trajectory         # Replay the already optimized trajectory in RVIZ
bool                   play_initialization       # Play motion generated by unoptimized initial variables
bool                   plot_trajectory           # Plot the optimized trajectory
float64                replay_speed              # speed at which to playback the motion.
bool                   optimize                  # run TOWR optimization
int32                  robot                     # Monoped, Biped, Quadruped, Anymal
int32                  terrain                   # some information about the used terrain (e.g stairs, gap, slope)
int32                  gait                      # Type of Motion (Walk, Trott, Bound, Pace)
bool                   optimize_phase_durations  # If true, the gait is optimized over as well

================================================================================
MSG: xpp_msgs/StateLin3d
# This contains the 3D representation of a linear state, including:
# position, velocity, acceleration

geometry_msgs/Point pos
geometry_msgs/Vector3 vel
geometry_msgs/Vector3 acc
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['goal_lin','goal_ang','total_duration','replay_trajectory','play_initialization','plot_trajectory','replay_speed','optimize','robot','terrain','gait','optimize_phase_durations']
  _slot_types = ['xpp_msgs/StateLin3d','xpp_msgs/StateLin3d','float64','bool','bool','bool','float64','bool','int32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal_lin,goal_ang,total_duration,replay_trajectory,play_initialization,plot_trajectory,replay_speed,optimize,robot,terrain,gait,optimize_phase_durations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TowrCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.goal_lin is None:
        self.goal_lin = xpp_msgs.msg.StateLin3d()
      if self.goal_ang is None:
        self.goal_ang = xpp_msgs.msg.StateLin3d()
      if self.total_duration is None:
        self.total_duration = 0.
      if self.replay_trajectory is None:
        self.replay_trajectory = False
      if self.play_initialization is None:
        self.play_initialization = False
      if self.plot_trajectory is None:
        self.plot_trajectory = False
      if self.replay_speed is None:
        self.replay_speed = 0.
      if self.optimize is None:
        self.optimize = False
      if self.robot is None:
        self.robot = 0
      if self.terrain is None:
        self.terrain = 0
      if self.gait is None:
        self.gait = 0
      if self.optimize_phase_durations is None:
        self.optimize_phase_durations = False
    else:
      self.goal_lin = xpp_msgs.msg.StateLin3d()
      self.goal_ang = xpp_msgs.msg.StateLin3d()
      self.total_duration = 0.
      self.replay_trajectory = False
      self.play_initialization = False
      self.plot_trajectory = False
      self.replay_speed = 0.
      self.optimize = False
      self.robot = 0
      self.terrain = 0
      self.gait = 0
      self.optimize_phase_durations = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_19d3BdB3iB().pack(_x.goal_lin.pos.x, _x.goal_lin.pos.y, _x.goal_lin.pos.z, _x.goal_lin.vel.x, _x.goal_lin.vel.y, _x.goal_lin.vel.z, _x.goal_lin.acc.x, _x.goal_lin.acc.y, _x.goal_lin.acc.z, _x.goal_ang.pos.x, _x.goal_ang.pos.y, _x.goal_ang.pos.z, _x.goal_ang.vel.x, _x.goal_ang.vel.y, _x.goal_ang.vel.z, _x.goal_ang.acc.x, _x.goal_ang.acc.y, _x.goal_ang.acc.z, _x.total_duration, _x.replay_trajectory, _x.play_initialization, _x.plot_trajectory, _x.replay_speed, _x.optimize, _x.robot, _x.terrain, _x.gait, _x.optimize_phase_durations))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal_lin is None:
        self.goal_lin = xpp_msgs.msg.StateLin3d()
      if self.goal_ang is None:
        self.goal_ang = xpp_msgs.msg.StateLin3d()
      end = 0
      _x = self
      start = end
      end += 177
      (_x.goal_lin.pos.x, _x.goal_lin.pos.y, _x.goal_lin.pos.z, _x.goal_lin.vel.x, _x.goal_lin.vel.y, _x.goal_lin.vel.z, _x.goal_lin.acc.x, _x.goal_lin.acc.y, _x.goal_lin.acc.z, _x.goal_ang.pos.x, _x.goal_ang.pos.y, _x.goal_ang.pos.z, _x.goal_ang.vel.x, _x.goal_ang.vel.y, _x.goal_ang.vel.z, _x.goal_ang.acc.x, _x.goal_ang.acc.y, _x.goal_ang.acc.z, _x.total_duration, _x.replay_trajectory, _x.play_initialization, _x.plot_trajectory, _x.replay_speed, _x.optimize, _x.robot, _x.terrain, _x.gait, _x.optimize_phase_durations,) = _get_struct_19d3BdB3iB().unpack(str[start:end])
      self.replay_trajectory = bool(self.replay_trajectory)
      self.play_initialization = bool(self.play_initialization)
      self.plot_trajectory = bool(self.plot_trajectory)
      self.optimize = bool(self.optimize)
      self.optimize_phase_durations = bool(self.optimize_phase_durations)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_19d3BdB3iB().pack(_x.goal_lin.pos.x, _x.goal_lin.pos.y, _x.goal_lin.pos.z, _x.goal_lin.vel.x, _x.goal_lin.vel.y, _x.goal_lin.vel.z, _x.goal_lin.acc.x, _x.goal_lin.acc.y, _x.goal_lin.acc.z, _x.goal_ang.pos.x, _x.goal_ang.pos.y, _x.goal_ang.pos.z, _x.goal_ang.vel.x, _x.goal_ang.vel.y, _x.goal_ang.vel.z, _x.goal_ang.acc.x, _x.goal_ang.acc.y, _x.goal_ang.acc.z, _x.total_duration, _x.replay_trajectory, _x.play_initialization, _x.plot_trajectory, _x.replay_speed, _x.optimize, _x.robot, _x.terrain, _x.gait, _x.optimize_phase_durations))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal_lin is None:
        self.goal_lin = xpp_msgs.msg.StateLin3d()
      if self.goal_ang is None:
        self.goal_ang = xpp_msgs.msg.StateLin3d()
      end = 0
      _x = self
      start = end
      end += 177
      (_x.goal_lin.pos.x, _x.goal_lin.pos.y, _x.goal_lin.pos.z, _x.goal_lin.vel.x, _x.goal_lin.vel.y, _x.goal_lin.vel.z, _x.goal_lin.acc.x, _x.goal_lin.acc.y, _x.goal_lin.acc.z, _x.goal_ang.pos.x, _x.goal_ang.pos.y, _x.goal_ang.pos.z, _x.goal_ang.vel.x, _x.goal_ang.vel.y, _x.goal_ang.vel.z, _x.goal_ang.acc.x, _x.goal_ang.acc.y, _x.goal_ang.acc.z, _x.total_duration, _x.replay_trajectory, _x.play_initialization, _x.plot_trajectory, _x.replay_speed, _x.optimize, _x.robot, _x.terrain, _x.gait, _x.optimize_phase_durations,) = _get_struct_19d3BdB3iB().unpack(str[start:end])
      self.replay_trajectory = bool(self.replay_trajectory)
      self.play_initialization = bool(self.play_initialization)
      self.plot_trajectory = bool(self.plot_trajectory)
      self.optimize = bool(self.optimize)
      self.optimize_phase_durations = bool(self.optimize_phase_durations)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19d3BdB3iB = None
def _get_struct_19d3BdB3iB():
    global _struct_19d3BdB3iB
    if _struct_19d3BdB3iB is None:
        _struct_19d3BdB3iB = struct.Struct("<19d3BdB3iB")
    return _struct_19d3BdB3iB
